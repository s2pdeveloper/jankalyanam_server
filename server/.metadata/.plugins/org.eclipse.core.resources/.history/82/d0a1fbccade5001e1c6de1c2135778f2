package com.app.service.imp;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.app.config.JwtFilter;
import com.app.config.JwtUtil;
import com.app.constant.ServiceConstant.Role;
import com.app.dto.LoginDTO;
import com.app.dto.RegisterDTO;
import com.app.dto.ResultDTO;
import com.app.dto.UserDTO;
import com.app.model.UserDO;
import com.app.repository.UserRepository;
import com.app.service.UserService;
import com.app.utilities.Utility;

@Service
public class UserServiceImp implements UserService{
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private JwtUtil jwtService;

    
    @Autowired
    private AuthenticationManager authenticationManager;
    
    @Autowired
    private CustomUserDetailsService userDetailsService;
    


    public UserDO saveUser(UserDO user) {
        return userRepository.save(user);
    }
    public UserDO getUser(Long id) {
        return userRepository.findById(id).orElse(null);
    }
    public List<UserDTO> getAllUsers(){
    	try {
        return userRepository.findAll();
	}
	catch(Exception e) {
		System.out.println("EROORR__________"+e);
		 throw new RuntimeException("Failed to get blood request by ID: ", e);
	}
    }
    
    public void deleteUser(Long id) {
        userRepository.deleteById(id);
    }
    
	@Override
	public ResultDTO register(RegisterDTO user) {
		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
		user.setPassword(encoder.encode(user.getPassword()));
		UserDO userDO = Utility.mapObject(user, UserDO.class);
		UserDO saveData = userRepository.save(userDO);
		return new ResultDTO(saveData.getId().toString(),"Register Sucessfully");
	}
	
	@Override
	public UserDTO login(LoginDTO user) throws Exception {
	      try {
	          authenticationManager.authenticate(
	             new
	             UsernamePasswordAuthenticationToken(user.getMobileNo(),
	             user.getPassword())
	          );
	       } catch (DisabledException e) {
	          throw new Exception("USER_DISABLED", e);
	       } catch (BadCredentialsException e) {
	          throw new Exception("INVALID_CREDENTIALS", e);
	       }
	       final UserDetails userDetails = userDetailsService.loadUserByUsername(user.getMobileNo());
	       final String jwtToken = jwtService.generateToken(userDetails);
	       UserDTO userDTO = Utility.mapObject(userDetails, UserDTO.class);
	       userDTO.setToken(jwtToken);
	       return userDTO;
	}

	



}
