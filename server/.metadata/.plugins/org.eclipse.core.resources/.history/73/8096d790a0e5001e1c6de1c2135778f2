package com.app.service.imp;


import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Service;

import com.app.dto.BloodRequestDTO;
import com.app.dto.DonorDTO;
import com.app.model.BloodRequest;
import com.app.model.Donation;
import com.app.repository.BloodRequestRepository;
import com.app.service.BloodRequestService;
import com.app.utilities.Utility;

@Service
public class BloodRequestServiceImp implements BloodRequestService{
   
	@Autowired
    private BloodRequestRepository bloodRequestRepository;

	@Override
	public BloodRequestDTO getById(Long id) {
		try {
		Optional<BloodRequest> data = bloodRequestRepository.findById(id);
//		System.out.println("data_________"+data);
		BloodRequest b = data.orElse(null);
//		return convertModelToDTO(b);
		System.out.println("b------------"+b.getDonar());
		DonorDTO result1 = Utility.mapObject(b.getDonar(),DonorDTO.class);
		BloodRequestDTO result2 = Utility.mapObject(b,BloodRequestDTO.class);
		System.out.println("result1-----------"+result1);
		System.out.println("result2-----------"+result2);
		return result2;
		}
		catch(Exception e) {
			System.out.println("EROORR__________"+e);
			 throw new RuntimeException("Failed to get blood request by ID: " + id, e);
		}
	
		
	}
	
	public static DonorDTO convertDonotToDTO(Donation d) {
		DonorDTO ddto = new DonorDTO();
		ddto.setAge(d.getAge());
		ddto.setCity(d.getCity());
		ddto.setId(d.getId());
		return ddto;
	}
	
	public static BloodRequestDTO convertModelToDTO(BloodRequest b) {
		BloodRequestDTO bdto = new BloodRequestDTO();
		bdto.setId(b.getId());
		bdto.setDonar(convertDonotToDTO(b.getDonar()));
		bdto.setUser(null);
		return bdto;
	}

	@Override
	public BloodRequest createRequest(BloodRequest bloodRequest) {
	return bloodRequestRepository.save(bloodRequest);
	}
    
	



}
