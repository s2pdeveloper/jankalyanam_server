package com.app.service.imp;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.app.config.JwtFilter;
import com.app.config.JwtUtil;
import com.app.dto.ResultDTO;
import com.app.model.User;
import com.app.repository.UserRepository;
import com.app.service.UserService;

public class UserServiceImp implements UserService{
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private JwtUtil jwtService;
    
    @Autowired
    private BCryptPasswordEncoder bCryptPasswordEncoder;
    
    @Autowired
    private AuthenticationManager authenticationManager;
    
    private static final Logger logger = LoggerFactory.getLogger(UserServiceImp.class);

    public User saveUser(User user) {
        return userRepository.save(user);
    }
    public User getUser(String id) {
        return userRepository.findById(id).orElse(null);
    }
    public List<User> getAllUsers(){
        return userRepository.findAll();
    }
    public void deleteUser(String id) {
        userRepository.deleteById(id);
    }
	@Override
	public ResultDTO register(User user) {
		user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
		User saveData = userRepository.save(user);
		return new ResultDTO(saveData.getId(),"Register Sucessfully");
	}
	@Override
	public User login(User user) {
		BCryptPasswordEncoder decode = new BCryptPasswordEncoder();
		User data = userRepository.findByEmail(user.getEmail());
		
		
		if(bCryptPasswordEncoder.matches(user.getPassword(), data.getPassword())){
			return data;
		}
		
		   Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(user.getEmail(), data.getPassword()));
		    if(authentication.isAuthenticated()){
		       return user.builder()
		               .accessToken(jwtService.generateToken(user.getEmail()).build();
		    } else {
		        throw new UsernameNotFoundException("invalid user request..!!");
		    }
		return data;
	}
	


    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {

        logger.debug("Entering in loadUserByUsername Method...");
        User user = userRepository.findByEmail(username);
        if(user == null){
            logger.error("Username not found: " + username);
            throw new UsernameNotFoundException("could not found user..!!");
        }
        logger.info("User Authenticated Successfully..!!!");
        return user;
    }
}
