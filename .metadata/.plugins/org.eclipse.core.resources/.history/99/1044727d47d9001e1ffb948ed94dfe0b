package com.app.service.imp;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.app.config.JwtFilter;
import com.app.config.JwtUtil;
import com.app.dto.ResultDTO;
import com.app.model.User;
import com.app.repository.UserRepository;
import com.app.service.UserService;

@Service
public class UserServiceImp implements UserService{
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private JwtUtil jwtService;

    
    @Autowired
    private AuthenticationManager authenticationManager;
    
    @Autowired
    private CustomUserDetailsService userDetailsService;
    


    public User saveUser(User user) {
        return userRepository.save(user);
    }
    public User getUser(String id) {
        return userRepository.findById(id).orElse(null);
    }
    public List<User> getAllUsers(){
        return userRepository.findAll();
    }
    public void deleteUser(String id) {
        userRepository.deleteById(id);
    }
	@Override
	public ResultDTO register(User user) {
		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
		user.setPassword(encoder.encode(user.getPassword()));
		User saveData = userRepository.save(user);
		return new ResultDTO(saveData.getId(),"Register Sucessfully");
	}
	@Override
	public String login(User user) throws Exception {
//		BCryptPasswordEncoder decode = new BCryptPasswordEncoder();
//		User data = userRepository.findByEmail(user.getEmail());
//		
//		
//		if(bCryptPasswordEncoder.matches(user.getPassword(), data.getPassword())){
//			return data;
//		}
		
	      try {
	          authenticationManager.authenticate(
	             new
	             UsernamePasswordAuthenticationToken(user.getEmail(),
	             user.getPassword())
	          );
	       } catch (DisabledException e) {
	          throw new Exception("USER_DISABLED", e);
	       } catch (BadCredentialsException e) {
	          throw new Exception("INVALID_CREDENTIALS", e);
	       }
	       final UserDetails userDetails = userDetailsService.loadUserByUsername(user.getEmail());
	       final String jwtToken = jwtService.generateToken(userDetails);
	       return jwtToken;
	}
	



}
